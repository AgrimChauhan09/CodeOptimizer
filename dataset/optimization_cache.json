{
  "2d78b1559abd5ce27bb56584e39b83cf": {
    "result": {
      "unoptimized_time": "0.006585",
      "optimized_time": "0.002836",
      "best_optimization": "O2",
      "predicted_optimization": "O3",
      "time_improvement": "56.93%",
      "optimization_message": "This code has already been optimized. Using cached results for consistency.",
      "llvm_ir": "; ModuleID = '/tmp/tmp2wd8q4ey/5b536a49-8b50-4f4b-bd95-07be57b21e98.c'\nsource_filename = \"/tmp/tmp2wd8q4ey/5b536a49-8b50-4f4b-bd95-07be57b21e98.c\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n@.str = private unnamed_addr constant [26 x i8] c\"Sample value C[0][0]: %d\\0A\\00\", align 1\n\n; Function Attrs: noinline nounwind optnone uwtable\ndefine dso_local void @matrix_multiply(ptr noundef %0, ptr noundef %1, ptr noundef %2) #0 {\n  %4 = alloca ptr, align 8\n  %5 = alloca ptr, align 8\n  %6 = alloca ptr, align 8\n  %7 = alloca i32, align 4\n  %8 = alloca i32, align 4\n  %9 = alloca i32, align 4\n  store ptr %0, ptr %4, align 8\n  store ptr %1, ptr %5, align 8\n  store ptr %2, ptr %6, align 8\n  store i32 0, ptr %7, align 4\n  br label %10\n\n10:                                               ; preds = %63, %3\n  %11 = load i32, ptr %7, align 4\n  %12 = icmp slt i32 %11, 100\n  br i1 %12, label %13, label %66\n\n13:                                               ; preds = %10\n  store i32 0, ptr %8, align 4\n  br label %14\n\n14:                                               ; preds = %59, %13\n  %15 = load i32, ptr %8, align 4\n  %16 = icmp slt i32 %15, 100\n  br i1 %16, label %17, label %62\n\n17:                                               ; preds = %14\n  %18 = load ptr, ptr %6, align 8\n  %19 = load i32, ptr %7, align 4\n  %20 = sext i32 %19 to i64\n  %21 = getelementptr inbounds [100 x i32], ptr %18, i64 %20\n  %22 = load i32, ptr %8, align 4\n  %23 = sext i32 %22 to i64\n  %24 = getelementptr inbounds [100 x i32], ptr %21, i64 0, i64 %23\n  store i32 0, ptr %24, align 4\n  store i32 0, ptr %9, align 4\n  br label %25\n\n25:                                               ; preds = %55, %17\n  %26 = load i32, ptr %9, align 4\n  %27 = icmp slt i32 %26, 100\n  br i1 %27, label %28, label %58\n\n28:                                               ; preds = %25\n  %29 = load ptr, ptr %4, align 8\n  %30 = load i32, ptr %7, align 4\n  %31 = sext i32 %30 to i64\n  %32 = getelementptr inbounds [100 x i32], ptr %29, i64 %31\n  %33 = load i32, ptr %9, align 4\n  %34 = sext i32 %33 to i64\n  %35 = getelementptr inbounds [100 x i32], ptr %32, i64 0, i64 %34\n  %36 = load i32, ptr %35, align 4\n  %37 = load ptr, ptr %5, align 8\n  %38 = load i32, ptr %9, align 4\n  %39 = sext i32 %38 to i64\n  %40 = getelementptr inbounds [100 x i32], ptr %37, i64 %39\n  %41 = load i32, ptr %8, align 4\n  %42 = sext i32 %41 to i64\n  %43 = getelementptr inbounds [100 x i32], ptr %40, i64 0, i64 %42\n  %44 = load i32, ptr %43, align 4\n  %45 = mul nsw i32 %36, %44\n  %46 = load ptr, ptr %6, align 8\n  %47 = load i32, ptr %7, align 4\n  %48 = sext i32 %47 to i64\n  %49 = getelementptr inbounds [100 x i32], ptr %46, i64 %48\n  %50 = load i32, ptr %8, align 4\n  %51 = sext i32 %50 to i64\n  %52 = getelementptr inbounds [100 x i32], ptr %49, i64 0, i64 %51\n  %53 = load i32, ptr %52, align 4\n  %54 = add nsw i32 %53, %45\n  store i32 %54, ptr %52, align 4\n  br label %55\n\n55:                                               ; preds = %28\n  %56 = load i32, ptr %9, align 4\n  %57 = add nsw i32 %56, 1\n  store i32 %57, ptr %9, align 4\n  br label %25, !llvm.loop !6\n\n58:                                               ; preds = %25\n  br label %59\n\n59:                                               ; preds = %58\n  %60 = load i32, ptr %8, align 4\n  %61 = add nsw i32 %60, 1\n  store i32 %61, ptr %8, align 4\n  br label %14, !llvm.loop !8\n\n62:                                               ; preds = %14\n  br label %63\n\n63:                                               ; preds = %62\n  %64 = load i32, ptr %7, align 4\n  %65 = add nsw i32 %64, 1\n  store i32 %65, ptr %7, align 4\n  br label %10, !llvm.loop !9\n\n66:                                               ; preds = %10\n  ret void\n}\n\n; Function Attrs: noinline nounwind optnone uwtable\ndefine dso_local i32 @main() #0 {\n  %1 = alloca i32, align 4\n  %2 = alloca [100 x [100 x i32]], align 16\n  %3 = alloca [100 x [100 x i32]], align 16\n  %4 = alloca [100 x [100 x i32]], align 16\n  %5 = alloca i32, align 4\n  %6 = alloca i32, align 4\n  store i32 0, ptr %1, align 4\n  store i32 0, ptr %5, align 4\n  br label %7\n\n7:                                                ; preds = %35, %0\n  %8 = load i32, ptr %5, align 4\n  %9 = icmp slt i32 %8, 100\n  br i1 %9, label %10, label %38\n\n10:                                               ; preds = %7\n  store i32 0, ptr %6, align 4\n  br label %11\n\n11:                                               ; preds = %31, %10\n  %12 = load i32, ptr %6, align 4\n  %13 = icmp slt i32 %12, 100\n  br i1 %13, label %14, label %34\n\n14:                                               ; preds = %11\n  %15 = call i32 @rand() #3\n  %16 = srem i32 %15, 10\n  %17 = load i32, ptr %5, align 4\n  %18 = sext i32 %17 to i64\n  %19 = getelementptr inbounds [100 x [100 x i32]], ptr %2, i64 0, i64 %18\n  %20 = load i32, ptr %6, align 4\n  %21 = sext i32 %20 to i64\n  %22 = getelementptr inbounds [100 x i32], ptr %19, i64 0, i64 %21\n  store i32 %16, ptr %22, align 4\n  %23 = call i32 @rand() #3\n  %24 = srem i32 %23, 10\n  %25 = load i32, ptr %5, align 4\n  %26 = sext i32 %25 to i64\n  %27 = getelementptr inbounds [100 x [100 x i32]], ptr %3, i64 0, i64 %26\n  %28 = load i32, ptr %6, align 4\n  %29 = sext i32 %28 to i64\n  %30 = getelementptr inbounds [100 x i32], ptr %27, i64 0, i64 %29\n  store i32 %24, ptr %30, align 4\n  br label %31\n\n31:                                               ; preds = %14\n  %32 = load i32, ptr %6, align 4\n  %33 = add nsw i32 %32, 1\n  store i32 %33, ptr %6, align 4\n  br label %11, !llvm.loop !10\n\n34:                                               ; preds = %11\n  br label %35\n\n35:                                               ; preds = %34\n  %36 = load i32, ptr %5, align 4\n  %37 = add nsw i32 %36, 1\n  store i32 %37, ptr %5, align 4\n  br label %7, !llvm.loop !11\n\n38:                                               ; preds = %7\n  %39 = getelementptr inbounds [100 x [100 x i32]], ptr %2, i64 0, i64 0\n  %40 = getelementptr inbounds [100 x [100 x i32]], ptr %3, i64 0, i64 0\n  %41 = getelementptr inbounds [100 x [100 x i32]], ptr %4, i64 0, i64 0\n  call void @matrix_multiply(ptr noundef %39, ptr noundef %40, ptr noundef %41)\n  %42 = getelementptr inbounds [100 x [100 x i32]], ptr %4, i64 0, i64 0\n  %43 = getelementptr inbounds [100 x i32], ptr %42, i64 0, i64 0\n  %44 = load i32, ptr %43, align 16\n  %45 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %44)\n  ret i32 0\n}\n\n; Function Attrs: nounwind\ndeclare i32 @rand() #1\n\ndeclare i32 @printf(ptr noundef, ...) #2\n\nattributes #0 = { noinline nounwind optnone uwtable \"frame-pointer\"=\"all\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { nounwind \"frame-pointer\"=\"all\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #2 = { \"frame-pointer\"=\"all\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #3 = { nounwind }\n\n!llvm.module.flags = !{!0, !1, !2, !3, !4}\n!llvm.ident = !{!5}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 8, !\"PIC Level\", i32 2}\n!2 = !{i32 7, !\"PIE Level\", i32 2}\n!3 = !{i32 7, !\"uwtable\", i32 2}\n!4 = !{i32 7, !\"frame-pointer\", i32 2}\n!5 = !{!\"clang version 17.0.6\"}\n!6 = distinct !{!6, !7}\n!7 = !{!\"llvm.loop.mustprogress\"}\n!8 = distinct !{!8, !7}\n!9 = distinct !{!9, !7}\n!10 = distinct !{!10, !7}\n!11 = distinct !{!11, !7}\n",
      "optimization_details": [
        {
          "name": "Loop Unrolling",
          "benefit": "Reduced branch overhead",
          "potential": 5
        },
        {
          "name": "Memory-to-Register Promotion",
          "benefit": "Faster memory access",
          "potential": 12
        },
        {
          "name": "Constant Folding",
          "benefit": "Simplified computation",
          "potential": 5
        }
      ],
      "optimization_results": {
        "O1": 0.003398,
        "O2": 0.002836,
        "O3": 0.004247,
        "Os": 0.0045,
        "Oz": 0.003725
      },
      "features": {
        "loop_count": 15,
        "func_calls": 8,
        "instr_count": 154,
        "has_branch": 1,
        "uses_memory": 1,
        "uses_global": 0
      },
      "cached": true
    },
    "timestamp": "2025-06-22T03:49:50.996326",
    "code_hash": "2d78b1559abd5ce27bb56584e39b83cf"
  },
  "807484505c1d544f7dce031fd3a4a1e2": {
    "result": {
      "unoptimized_time": "0.003563",
      "optimized_time": "0.003563",
      "best_optimization": "O0",
      "predicted_optimization": "O1",
      "time_improvement": "0.00%",
      "optimization_message": "Optimization did not improve performance. Using unoptimized version.",
      "llvm_ir": "; ModuleID = '/tmp/tmp006_7aqm/fb894c84-b6ba-4312-b573-dd6e71560bf1.c'\nsource_filename = \"/tmp/tmp006_7aqm/fb894c84-b6ba-4312-b573-dd6e71560bf1.c\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-unknown-linux-gnu\"\n\n@.str = private unnamed_addr constant [6 x i8] c\"hello\\00\", align 1\n\n; Function Attrs: noinline nounwind optnone uwtable\ndefine dso_local i32 @main() #0 {\n  %1 = alloca i32, align 4\n  store i32 0, ptr %1, align 4\n  %2 = call i32 (ptr, ...) @printf(ptr noundef @.str)\n  ret i32 0\n}\n\ndeclare i32 @printf(ptr noundef, ...) #1\n\nattributes #0 = { noinline nounwind optnone uwtable \"frame-pointer\"=\"all\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { \"frame-pointer\"=\"all\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1, !2, !3, !4}\n!llvm.ident = !{!5}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 8, !\"PIC Level\", i32 2}\n!2 = !{i32 7, !\"PIE Level\", i32 2}\n!3 = !{i32 7, !\"uwtable\", i32 2}\n!4 = !{i32 7, !\"frame-pointer\", i32 2}\n!5 = !{!\"clang version 17.0.6\"}\n",
      "optimization_details": [
        {
          "name": "Function Inlining",
          "benefit": "Removed function call cost",
          "potential": 1
        },
        {
          "name": "Memory-to-Register Promotion",
          "benefit": "Faster memory access",
          "potential": 1
        },
        {
          "name": "Dead Code Elimination",
          "benefit": "Removed unused code",
          "potential": 1
        }
      ],
      "optimization_results": {
        "O1": 0.003718,
        "O2": 0.003686,
        "O3": 0.003822,
        "Os": 0.003811,
        "Oz": 0.007022
      },
      "features": {
        "loop_count": 0,
        "func_calls": 1,
        "instr_count": 9,
        "has_branch": 0,
        "uses_memory": 1,
        "uses_global": 0
      },
      "cached": false
    },
    "timestamp": "2025-06-22T04:05:26.383503",
    "code_hash": "807484505c1d544f7dce031fd3a4a1e2"
  },
  "02eb7086b5fa6ae4861e7f3f2f72bc13": {
    "result": {
      "unoptimized_time": "0.001072",
      "optimized_time": "0.001072",
      "best_optimization": "O0",
      "predicted_optimization": "Os",
      "time_improvement": "0.00%",
      "optimization_message": "Optimization did not improve performance. Using unoptimized version.",
      "llvm_ir": "; ModuleID = '/tmp/tmpxvo5z8ne/dea46409-6b09-43e3-a187-938a9c69269f.c'\nsource_filename = \"/tmp/tmpxvo5z8ne/dea46409-6b09-43e3-a187-938a9c69269f.c\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-pc-linux-gnu\"\n\n@__const.main.arr = private unnamed_addr constant [5 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5], align 16\n@.str = private unnamed_addr constant [9 x i8] c\"Sum: %d\\0A\\00\", align 1\n\n; Function Attrs: noinline nounwind optnone uwtable\ndefine dso_local i32 @main() #0 {\n  %1 = alloca i32, align 4\n  %2 = alloca [5 x i32], align 16\n  %3 = alloca i32, align 4\n  store i32 0, i32* %1, align 4\n  %4 = bitcast [5 x i32]* %2 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %4, i8* align 16 bitcast ([5 x i32]* @__const.main.arr to i8*), i64 20, i1 false)\n  %5 = getelementptr inbounds [5 x i32], [5 x i32]* %2, i64 0, i64 0\n  %6 = load i32, i32* %5, align 16\n  %7 = getelementptr inbounds [5 x i32], [5 x i32]* %2, i64 0, i64 1\n  %8 = load i32, i32* %7, align 4\n  %9 = add nsw i32 %6, %8\n  %10 = getelementptr inbounds [5 x i32], [5 x i32]* %2, i64 0, i64 2\n  %11 = load i32, i32* %10, align 8\n  %12 = add nsw i32 %9, %11\n  %13 = getelementptr inbounds [5 x i32], [5 x i32]* %2, i64 0, i64 3\n  %14 = load i32, i32* %13, align 4\n  %15 = add nsw i32 %12, %14\n  %16 = getelementptr inbounds [5 x i32], [5 x i32]* %2, i64 0, i64 4\n  %17 = load i32, i32* %16, align 16\n  %18 = add nsw i32 %15, %17\n  store i32 %18, i32* %3, align 4\n  %19 = load i32, i32* %3, align 4\n  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 noundef %19)\n  ret i32 0\n}\n\n; Function Attrs: argmemonly nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1\n\ndeclare i32 @printf(i8* noundef, ...) #2\n\nattributes #0 = { noinline nounwind optnone uwtable \"frame-pointer\"=\"all\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly nofree nounwind willreturn }\nattributes #2 = { \"frame-pointer\"=\"all\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1, !2, !3, !4}\n!llvm.ident = !{!5}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"PIC Level\", i32 2}\n!2 = !{i32 7, !\"PIE Level\", i32 2}\n!3 = !{i32 7, !\"uwtable\", i32 1}\n!4 = !{i32 7, !\"frame-pointer\", i32 2}\n!5 = !{!\"Ubuntu clang version 14.0.6\"}\n",
      "optimization_details": [
        {
          "name": "Memory-to-Register Promotion",
          "benefit": "Faster memory access",
          "potential": 3
        },
        {
          "name": "Dead Code Elimination",
          "benefit": "Removed unused code",
          "potential": 1
        }
      ],
      "optimization_results": {
        "O1": 0.00151,
        "O2": 0.001773,
        "O3": 0.001611,
        "Os": 0.00229,
        "Oz": 0.001924
      },
      "features": {
        "loop_count": 0,
        "func_calls": 2,
        "instr_count": 29,
        "has_branch": 0,
        "uses_memory": 1,
        "uses_global": 0
      },
      "cached": false
    },
    "timestamp": "2025-06-22T09:50:12.023043",
    "code_hash": "02eb7086b5fa6ae4861e7f3f2f72bc13"
  },
  "8230ce8217e852755e4c4a0f2ae87ec3": {
    "result": {
      "unoptimized_time": "0.002090",
      "optimized_time": "0.001106",
      "best_optimization": "O1",
      "predicted_optimization": "O2",
      "time_improvement": "47.08%",
      "optimization_message": "Performance improved by 47.08% with O1 optimization",
      "llvm_ir": "; ModuleID = '/tmp/tmpcnkgtywd/f2b53129-c566-411c-85cb-71a25c0c4633.c'\nsource_filename = \"/tmp/tmpcnkgtywd/f2b53129-c566-411c-85cb-71a25c0c4633.c\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-pc-linux-gnu\"\n\n@__const.main.arr = private unnamed_addr constant [5 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5], align 16\n@.str = private unnamed_addr constant [9 x i8] c\"Sum: %d\\0A\\00\", align 1\n\n; Function Attrs: noinline nounwind optnone uwtable\ndefine dso_local i32 @main() #0 {\n  %1 = alloca i32, align 4\n  %2 = alloca [5 x i32], align 16\n  %3 = alloca i32, align 4\n  %4 = alloca i32, align 4\n  store i32 0, i32* %1, align 4\n  %5 = bitcast [5 x i32]* %2 to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %5, i8* align 16 bitcast ([5 x i32]* @__const.main.arr to i8*), i64 20, i1 false)\n  store i32 0, i32* %3, align 4\n  store i32 0, i32* %4, align 4\n  br label %6\n\n6:                                                ; preds = %16, %0\n  %7 = load i32, i32* %4, align 4\n  %8 = icmp slt i32 %7, 5\n  br i1 %8, label %9, label %19\n\n9:                                                ; preds = %6\n  %10 = load i32, i32* %3, align 4\n  %11 = load i32, i32* %4, align 4\n  %12 = sext i32 %11 to i64\n  %13 = getelementptr inbounds [5 x i32], [5 x i32]* %2, i64 0, i64 %12\n  %14 = load i32, i32* %13, align 4\n  %15 = add nsw i32 %10, %14\n  store i32 %15, i32* %3, align 4\n  br label %16\n\n16:                                               ; preds = %9\n  %17 = load i32, i32* %4, align 4\n  %18 = add nsw i32 %17, 1\n  store i32 %18, i32* %4, align 4\n  br label %6, !llvm.loop !6\n\n19:                                               ; preds = %6\n  %20 = load i32, i32* %3, align 4\n  %21 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 noundef %20)\n  ret i32 0\n}\n\n; Function Attrs: argmemonly nofree nounwind willreturn\ndeclare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1\n\ndeclare i32 @printf(i8* noundef, ...) #2\n\nattributes #0 = { noinline nounwind optnone uwtable \"frame-pointer\"=\"all\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { argmemonly nofree nounwind willreturn }\nattributes #2 = { \"frame-pointer\"=\"all\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1, !2, !3, !4}\n!llvm.ident = !{!5}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"PIC Level\", i32 2}\n!2 = !{i32 7, !\"PIE Level\", i32 2}\n!3 = !{i32 7, !\"uwtable\", i32 1}\n!4 = !{i32 7, !\"frame-pointer\", i32 2}\n!5 = !{!\"Ubuntu clang version 14.0.6\"}\n!6 = distinct !{!6, !7}\n!7 = !{!\"llvm.loop.mustprogress\"}\n",
      "optimization_details": [
        {
          "name": "Loop Unrolling",
          "benefit": "Reduced branch overhead",
          "potential": 1
        },
        {
          "name": "Memory-to-Register Promotion",
          "benefit": "Faster memory access",
          "potential": 4
        },
        {
          "name": "Constant Folding",
          "benefit": "Simplified computation",
          "potential": 1
        },
        {
          "name": "Dead Code Elimination",
          "benefit": "Removed unused code",
          "potential": 1
        }
      ],
      "optimization_results": {
        "O1": 0.001106,
        "O2": 0.001881,
        "O3": 0.001645,
        "Os": 0.001254,
        "Oz": 0.001118
      },
      "features": {
        "loop_count": 3,
        "func_calls": 2,
        "instr_count": 37,
        "has_branch": 1,
        "uses_memory": 1,
        "uses_global": 0
      },
      "cached": false
    },
    "timestamp": "2025-06-22T09:50:34.630997",
    "code_hash": "8230ce8217e852755e4c4a0f2ae87ec3"
  },
  "8c090bf851b1afcbf321e37c91c43772": {
    "result": {
      "unoptimized_time": "0.001227",
      "optimized_time": "0.001062",
      "best_optimization": "Oz",
      "predicted_optimization": "O2",
      "time_improvement": "13.45%",
      "optimization_message": "This code has already been optimized. Using cached results for consistency.",
      "llvm_ir": "; ModuleID = '/tmp/tmp6e7baydn/d51869ae-ffcf-4a9a-88bd-33fac47ee8a7.c'\nsource_filename = \"/tmp/tmp6e7baydn/d51869ae-ffcf-4a9a-88bd-33fac47ee8a7.c\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-pc-linux-gnu\"\n\n@.str = private unnamed_addr constant [3 x i8] c\"%d\\00\", align 1\n\n; Function Attrs: noinline nounwind optnone uwtable\ndefine dso_local i32 @main() #0 {\n  %1 = alloca i32, align 4\n  %2 = alloca i32, align 4\n  %3 = alloca i32, align 4\n  store i32 0, i32* %1, align 4\n  store i32 0, i32* %2, align 4\n  store i32 0, i32* %3, align 4\n  br label %4\n\n4:                                                ; preds = %11, %0\n  %5 = load i32, i32* %3, align 4\n  %6 = icmp slt i32 %5, 10\n  br i1 %6, label %7, label %14\n\n7:                                                ; preds = %4\n  %8 = load i32, i32* %3, align 4\n  %9 = load i32, i32* %2, align 4\n  %10 = add nsw i32 %9, %8\n  store i32 %10, i32* %2, align 4\n  br label %11\n\n11:                                               ; preds = %7\n  %12 = load i32, i32* %3, align 4\n  %13 = add nsw i32 %12, 1\n  store i32 %13, i32* %3, align 4\n  br label %4, !llvm.loop !6\n\n14:                                               ; preds = %4\n  %15 = load i32, i32* %2, align 4\n  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 noundef %15)\n  ret i32 0\n}\n\ndeclare i32 @printf(i8* noundef, ...) #1\n\nattributes #0 = { noinline nounwind optnone uwtable \"frame-pointer\"=\"all\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { \"frame-pointer\"=\"all\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1, !2, !3, !4}\n!llvm.ident = !{!5}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"PIC Level\", i32 2}\n!2 = !{i32 7, !\"PIE Level\", i32 2}\n!3 = !{i32 7, !\"uwtable\", i32 1}\n!4 = !{i32 7, !\"frame-pointer\", i32 2}\n!5 = !{!\"Ubuntu clang version 14.0.6\"}\n!6 = distinct !{!6, !7}\n!7 = !{!\"llvm.loop.mustprogress\"}\n",
      "optimization_details": [
        {
          "name": "Loop Unrolling",
          "benefit": "Reduced branch overhead",
          "potential": 1
        },
        {
          "name": "Memory-to-Register Promotion",
          "benefit": "Faster memory access",
          "potential": 3
        },
        {
          "name": "Constant Folding",
          "benefit": "Simplified computation",
          "potential": 1
        },
        {
          "name": "Dead Code Elimination",
          "benefit": "Removed unused code",
          "potential": 1
        }
      ],
      "optimization_results": {
        "O1": 0.001169,
        "O2": 0.002205,
        "O3": 0.002036,
        "Os": 0.002561,
        "Oz": 0.001062
      },
      "features": {
        "loop_count": 3,
        "func_calls": 1,
        "instr_count": 31,
        "has_branch": 1,
        "uses_memory": 1,
        "uses_global": 0
      },
      "cached": true
    },
    "timestamp": "2025-06-22T20:10:40.906562",
    "code_hash": "8c090bf851b1afcbf321e37c91c43772"
  },
  "115daae7ef36c97f907c9098db982daa": {
    "result": {
      "unoptimized_time": "0.002368",
      "optimized_time": "0.001295",
      "best_optimization": "O2",
      "predicted_optimization": "O2",
      "time_improvement": "45.31%",
      "optimization_message": "Performance improved by 45.31% with O2 optimization",
      "llvm_ir": "; ModuleID = '/tmp/tmpt0t2fcxn/2c9d39c0-fd82-4328-91fc-98a7dea3f855.c'\nsource_filename = \"/tmp/tmpt0t2fcxn/2c9d39c0-fd82-4328-91fc-98a7dea3f855.c\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-pc-linux-gnu\"\n\n@.str = private unnamed_addr constant [3 x i8] c\"%d\\00\", align 1\n\n; Function Attrs: noinline nounwind optnone uwtable\ndefine dso_local i32 @main() #0 {\n  %1 = alloca i32, align 4\n  %2 = alloca i32, align 4\n  %3 = alloca i32, align 4\n  store i32 0, i32* %1, align 4\n  store i32 0, i32* %2, align 4\n  store i32 0, i32* %3, align 4\n  br label %4\n\n4:                                                ; preds = %11, %0\n  %5 = load i32, i32* %3, align 4\n  %6 = icmp slt i32 %5, 1000\n  br i1 %6, label %7, label %14\n\n7:                                                ; preds = %4\n  %8 = load i32, i32* %3, align 4\n  %9 = load i32, i32* %2, align 4\n  %10 = add nsw i32 %9, %8\n  store i32 %10, i32* %2, align 4\n  br label %11\n\n11:                                               ; preds = %7\n  %12 = load i32, i32* %3, align 4\n  %13 = add nsw i32 %12, 1\n  store i32 %13, i32* %3, align 4\n  br label %4, !llvm.loop !6\n\n14:                                               ; preds = %4\n  %15 = load i32, i32* %2, align 4\n  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 noundef %15)\n  ret i32 0\n}\n\ndeclare i32 @printf(i8* noundef, ...) #1\n\nattributes #0 = { noinline nounwind optnone uwtable \"frame-pointer\"=\"all\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { \"frame-pointer\"=\"all\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1, !2, !3, !4}\n!llvm.ident = !{!5}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"PIC Level\", i32 2}\n!2 = !{i32 7, !\"PIE Level\", i32 2}\n!3 = !{i32 7, !\"uwtable\", i32 1}\n!4 = !{i32 7, !\"frame-pointer\", i32 2}\n!5 = !{!\"Ubuntu clang version 14.0.6\"}\n!6 = distinct !{!6, !7}\n!7 = !{!\"llvm.loop.mustprogress\"}\n",
      "optimization_details": [
        {
          "name": "Loop Unrolling",
          "benefit": "Reduced branch overhead",
          "potential": 1
        },
        {
          "name": "Memory-to-Register Promotion",
          "benefit": "Faster memory access",
          "potential": 3
        },
        {
          "name": "Constant Folding",
          "benefit": "Simplified computation",
          "potential": 1
        },
        {
          "name": "Dead Code Elimination",
          "benefit": "Removed unused code",
          "potential": 1
        }
      ],
      "optimization_results": {
        "O1": 0.002564,
        "O2": 0.001295,
        "O3": 0.002251,
        "Os": 0.002436,
        "Oz": 0.001468
      },
      "features": {
        "loop_count": 3,
        "func_calls": 1,
        "instr_count": 31,
        "has_branch": 1,
        "uses_memory": 1,
        "uses_global": 0
      },
      "cached": false
    },
    "timestamp": "2025-06-22T20:16:12.097135",
    "code_hash": "115daae7ef36c97f907c9098db982daa"
  },
  "9c3f88ab53b08c96d966f26556ace98f": {
    "result": {
      "unoptimized_time": "0.001936",
      "optimized_time": "0.001250",
      "best_optimization": "O1",
      "predicted_optimization": "O2",
      "time_improvement": "35.43%",
      "optimization_message": "Performance improved by 35.43% with O1 optimization",
      "llvm_ir": "; ModuleID = '/tmp/tmpecw8340f/dd7da374-e31e-4f04-b5b6-6b0d7e410e79.c'\nsource_filename = \"/tmp/tmpecw8340f/dd7da374-e31e-4f04-b5b6-6b0d7e410e79.c\"\ntarget datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-pc-linux-gnu\"\n\n@.str = private unnamed_addr constant [3 x i8] c\"%d\\00\", align 1\n\n; Function Attrs: noinline nounwind optnone uwtable\ndefine dso_local i32 @main() #0 {\n  %1 = alloca i32, align 4\n  %2 = alloca i32, align 4\n  %3 = alloca i32, align 4\n  store i32 0, i32* %1, align 4\n  store i32 0, i32* %2, align 4\n  store i32 0, i32* %3, align 4\n  br label %4\n\n4:                                                ; preds = %11, %0\n  %5 = load i32, i32* %3, align 4\n  %6 = icmp slt i32 %5, 10000\n  br i1 %6, label %7, label %14\n\n7:                                                ; preds = %4\n  %8 = load i32, i32* %3, align 4\n  %9 = load i32, i32* %2, align 4\n  %10 = add nsw i32 %9, %8\n  store i32 %10, i32* %2, align 4\n  br label %11\n\n11:                                               ; preds = %7\n  %12 = load i32, i32* %3, align 4\n  %13 = add nsw i32 %12, 1\n  store i32 %13, i32* %3, align 4\n  br label %4, !llvm.loop !6\n\n14:                                               ; preds = %4\n  %15 = load i32, i32* %2, align 4\n  %16 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 noundef %15)\n  ret i32 0\n}\n\ndeclare i32 @printf(i8* noundef, ...) #1\n\nattributes #0 = { noinline nounwind optnone uwtable \"frame-pointer\"=\"all\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\nattributes #1 = { \"frame-pointer\"=\"all\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n\n!llvm.module.flags = !{!0, !1, !2, !3, !4}\n!llvm.ident = !{!5}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"PIC Level\", i32 2}\n!2 = !{i32 7, !\"PIE Level\", i32 2}\n!3 = !{i32 7, !\"uwtable\", i32 1}\n!4 = !{i32 7, !\"frame-pointer\", i32 2}\n!5 = !{!\"Ubuntu clang version 14.0.6\"}\n!6 = distinct !{!6, !7}\n!7 = !{!\"llvm.loop.mustprogress\"}\n",
      "optimization_details": [
        {
          "name": "Loop Unrolling",
          "benefit": "Reduced branch overhead",
          "potential": 1
        },
        {
          "name": "Memory-to-Register Promotion",
          "benefit": "Faster memory access",
          "potential": 3
        },
        {
          "name": "Constant Folding",
          "benefit": "Simplified computation",
          "potential": 1
        },
        {
          "name": "Dead Code Elimination",
          "benefit": "Removed unused code",
          "potential": 1
        }
      ],
      "optimization_results": {
        "O1": 0.00125,
        "O2": 0.002224,
        "O3": 0.002123,
        "Os": 0.002324,
        "Oz": 0.002568
      },
      "features": {
        "loop_count": 3,
        "func_calls": 1,
        "instr_count": 31,
        "has_branch": 1,
        "uses_memory": 1,
        "uses_global": 0
      },
      "cached": false
    },
    "timestamp": "2025-06-22T20:16:18.904750",
    "code_hash": "9c3f88ab53b08c96d966f26556ace98f"
  }
}